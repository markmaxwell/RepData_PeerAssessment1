value[1,]
value[1:3]
x <- 'hello world'
x
list(x)
x
list(x)
list(x,3)
list(x)
as.list(x)
x
x[3]
x <- 'hello world'
x
"hello" in x
"hello" in hellos
"hello" in "hello"
"hello" %in% "hellow"
"hello" %in% x
x
'hello' %in% x
grep('hello',x)
y <- grep('hello',x)
y
'hello' %!in% x
'hello' !%in% x
sum('hello' %in% x)
sum(!'hello' %in% x)
white_rabit <- "I'm Late, I'm Late for an Important Date"
white_rabit
toupper(white_rabit)
white_rabit
tolower(white_rabit)
args(toupper)
args(toupper)
for (i in white_rabit){
print(i)
}
for (i in white_rabit){
paste(i,sep=" ")
}
for (i in white_rabit){
paste(i,sep=" ")
}
for (i in white_rabit){
print(paste(i,sep=" "))
}
for (i in white_rabit){
print(i)
}
for (i in white_rabit){
print(paste(i, '\n'))
}
for (i in white_rabit){
print(paste(i, \n))
}
for (i in white_rabit){
print(paste(i, "\n"))
}
for (i in white_rabit){
temp <- paste(i, "\n")
return(temp)
}
for (i in white_rabit){
temp <- paste(i, " ")
return(temp)
}
test <- matrix(nrow=2,ncol=2)
test
test <- matrix(nrow=2,ncol=2)
test[1,1] <- 1
test[1,2] <- 2
test[2,2] <- 0
test[2,1] <- 2
test
solve(test)
grades <- c(40,20,30)
40 in grades
grep(40,grades)
grep(10,grades)
grep(12,grades)
grep(20,grades)
grep(10,grades)
grep(30,grades)
sum(grep(30,grades))
grep(30,grades)
grep("30",grades)
grades <- c(10,'hello')
grades
sum(grades)
as.Date("01/11/13")
as.Date("2013-01013")
as.Date("2013-01-13")
as.Date("2013-01-13")
as.Date("2013-13-01")
as.Date("2013-01-11")
as.Date("2013-01-11")+180
install.packages("swirl")
library("swirl", lib.loc="C:/Users/Mark Maxwell/Documents/R/win-library/3.0")
swirl()
5+7
x <- 5+7
x
z <- x-3
z <- (x-3)
z <- x - 3
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
x <- c(z,555)
x <- c(z,555z)
x <- c(z,555,z)
c(z,555,z)
z*2 +100
mySqrt <- z-1
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
1:20
pi:10
15:1
?:
??:
help(:)
?':'
?`:`
seq(1,20)
seq(0,
| 10, by=0.5)
seq(0,| 10, by=0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- (0.5, 55,-10, 6)
x <- (0.5,55,-10,6)
x <- c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
temp <- num_vect >= 6
temp <- (num_vect >= 6)
num_vect >= 6
c("My", "name","is")
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Mark")
my_name
paste("mark","maxwell",collapse= " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X", "Y", "Z"),sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
mydata
myData
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x (i.e. x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(nrow=4,ncol=5)
myMatrix2 <- matrix(nrow=4,ncol=5)
myMatrix2 <- matrix(1:20)
myMatrix2 <- matrix(nrow=1:20,ncol=1:20)
myMatrix2 <- matrix(nrow==1:20,ncol==1:20)
myMatrix2 <- matrix(nrow=1:20,ncol=1:20)
info()
myMatrix2 <- matrix(1:20)
myMatrix2 <- matrix(1:20,byrow=TRUE)
myMatrix2 <- is.matrix(as.matrix(1:20)
)
myMatrix2 <- is.matrix(as.matrix(1:20))
myMatrix2 <- matrix(1:20)
myMatrix2 <- matrix(1:20,byrow=TRUE)
myMatrix2 <- matrix(c(1:20),nrow=3,ncol=5)
myMatrix2 <- matrix(1:20,nrow=3,ncol=5)
myMatrix2 <- matrix(1:20,nrow=4,ncol=5)
indentical(myMatrix,myMatrix2)
identical(myMatrix,myMatrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("age", "bp","patient","rating", "test","weight")
cnames <- order(c("age", "bp","patient","rating", "test","weight"))
cnames <- sort(c("age", "bp","patient","rating", "test","weight"))
cnames <- sort(c("patient", "age", "weight", "bp", "rating", "test"))
cnames <- sort(c("patient", "age", "weight", "bp", "rating", "test"))
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)
colnames(myData) <- cnames
myData
file.url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(file.url,destfile="quiz.xlsx")
dat <- read.xlsx("quiz.xlsx",startRow=18,endRow=24,colIndex=7:15,sheetIndex=1)
library("xlsx", lib.loc="C:/Users/Mark Maxwell/Documents/R/win-library/3.0")
dat <- read.xlsx("quiz.xlsx",startRow=18,endRow=24,colIndex=7:15,sheetIndex=1)
dat <- read.xlsx("quiz.xlsx",startRow=18,endRow=24)
dat <- read.xlsx("quiz.xlsx",startRow=18,endRow=24,sheetIndex=1)
install.packages("KernSmooth")
library(KernSmooth)
debug(ls)
ls
ls
x <- maxtrx(2,2)
x <- matrix(nrow=2,ncol=2,rnorm(4))
x
x <- matrix(nrow=2,ncol=2,rnorm(4,mean=1))
x
x <- matrix(nrow=2,ncol=2,rnorm(4,mean=10))
x
x <- matrix(nrow=2,ncol=2,rnorm(4))
x
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
R.home()
MYSQL_HOME="C:/PROGRA~1/R/R-30~1.1/etc/Renviron.site
""
MYSQL_HOME="C:/PROGRA~1/R/R-30~1.1/etc/Renviron.site"
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
R.home()
install.packages('RMySQL',type='source')
R.home()
Sys.getenv('MYSQL_HOME')
R.home()
install.packages('RMySQL',type='source')
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL', type = “source”)
install.packages('RMySQL', type = 'source')
library(MySQL)
library(RMySQL)
install.packages('RMySQL', type = 'source')
library(RMySQL)
install.packages('RMySQL', type = 'source')
library(RMySQL)
install.packages('RMySQL', type = 'source')
library(RMySQL)
R.home()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
librart(RMySQL)
library(RMySQL)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL', type = 'source')
library(RMySQL)
library(rhdf5)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library("RMySQL", lib.loc="C:/Users/Mark Maxwell/Documents/R/win-library/3.0")
x < 1:10
x
x <- 1:10
x
order(x, decreasing=TRUE)
x <- 1:10
y <- 10:1
z <- as.data.frame(x,y)
z
z <- cbind(y)
z
z <- cbind(x,y)
z
z
table(z$x,z$y)
str(z)
z <- as.data.frame(x,y)
z
z <- as.data.frame(y)
z
z <- as.data.frame(x)
y <- as.data.frame(y)
z <- as.data.frame(x,y)
z <- cbind(x,y)
z
table(z$x,z$y)
table(z$x,cut(z$y,breaks=2))
table(z$x,cut(z$y,breaks=5))
table(z$x,cut(z$y,breaks=3))
table(z$x,cut(z$y,breaks=4))
x <- c("a","a","b","b","c","c","b","b","a","d")
z <- as.data.frame(x)
z <- as.data.frame(x,y)
y <- as.data.frame(y)
z <- as.data.frame(x,y)
z <- cbind(x,y)
z
table(z$x, cut(z$y,breaks=3))
table(z$x, quantile(z$y,.5))
table(z$x, quantile(z$y,probs=.5))
table(z$x, quantile(z$y,probs=0.5))
table(z$x, quantile(as.numeric(z$y),probs=0.5))
quantile(as.numeric(z$y),probs=0.5)
quantile(as.numeric(z$y),probs=025)
quantile(as.numeric(z$y),probs=0.25)
sessionInfo()
ggplot(mean.steps.per.day, aes(interval, steps)) + geom_line() + aes(colour = factor(week)) + xlab("Interval") + ylab("Mean Steps")+ facet_grid(week ~ .)
library(ggplot2)
library(plyr)
# Load and preprocess the activity dataset.
activity <- read.csv("activity.csv",header=TRUE)
#Convert the "date" variable structure from factor to date.
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
# Histogram of the total number of steps taken each day.
qplot(data=activity, date, steps, stat='summary', fun.y='sum',geom="histogram", xlab="Datetime",ylab="Total Steps")
#Calculate the sum of steps taken per day and create new aggregated dataframe
steps.per.day <- ddply(activity, .(date), function(df) sum(df$steps,na.rm=TRUE))
# Rename second column name
colnames(steps.per.day)[2] <- "steps"
# Calculate the mean of steps taken per day.
mean(steps.per.day$steps,na.rm=TRUE)
# Calculate the median of steps taken per day.
median(steps.per.day$steps,na.rm=TRUE)
# Plot of mean steps by day
qplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")
# 5-minute interval with the max number of steps across all the averages
activity[max(mean.steps.per.day$steps,na.rm=TRUE),]$interval
# Total number of missing values in the dataset
sum(is.na(activity))
# Fill in all of the missing values in the dataset with the mean number of steps that are take for the coresponding interval.
# Find the mean number of steps for each 5 minute interval
mean.interval <- ddply(activity, .(interval), function(df) median(df$steps,na.rm=TRUE))
# Rename second column
colnames(mean.interval)[2] <- "steps"
# Loop to locate and replace NAs
for (i in seq_along(activity$steps)){
if (is.na(activity[i,]$steps)){
x <- which(activity[i,]$interval==mean.interval$interval)
activity[i,]$steps <- mean.interval[x,]$steps
}
}
#Histogram of the total number of steps taken each day after NAs were filled.
qplot(date, steps, data=activity, stat='summary', fun.y='sum',geom="histogram", xlab="Datetime",ylab="Total Steps")
# Recalculate the sum of steps per day now that NAs are filled in.
steps.per.day <- ddply(activity, .(date), function(df) sum(df$steps,na.rm=TRUE))
# Rename second column name
colnames(steps.per.day)[2] <- "steps"
# Calculate the mean of steps taken per day.
mean(steps.per.day$steps,na.rm=TRUE)
# Calculate the median of steps taken per day.
median(steps.per.day$steps,na.rm=TRUE)
# Create a new variable in the dataset with indicating whether a given date is a weekday or weekend day.
activity$week <- ifelse (weekdays(activity$date)%in%c("Saturday","Sunday"),"weekend","weekday")
# Convert the variable to a factor format.
activity$week <- as.factor(activity$week)
# Calculate the mean of steps taken per day and create new dataframe
mean.steps.per.day <- ddply(activity, .(date), function(df) mean(df$steps,na.rm=TRUE))
# Rename second column name
colnames(mean.steps.per.day)[2] <- "steps"
#Panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
ggplot(activity, aes(interval, steps)) + geom_line() + aes(colour = factor(week)) + xlab("Interval") + ylab("Mean Steps")+ facet_grid(week ~ .)
setwd("C:/Users/Mark Maxwell/Desktop/Coursera/Data Science Specialization Track/05. Reproducible Research/Peer Assessment 1/repdata-data-activity")
library(ggplot2)
library(plyr)
# Load and preprocess the activity dataset.
activity <- read.csv("activity.csv",header=TRUE)
#Convert the "date" variable structure from factor to date.
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
# Histogram of the total number of steps taken each day.
qplot(data=activity, date, steps, stat='summary', fun.y='sum',geom="histogram", xlab="Datetime",ylab="Total Steps")
#Calculate the sum of steps taken per day and create new aggregated dataframe
steps.per.day <- ddply(activity, .(date), function(df) sum(df$steps,na.rm=TRUE))
# Rename second column name
colnames(steps.per.day)[2] <- "steps"
# Calculate the mean of steps taken per day.
mean(steps.per.day$steps,na.rm=TRUE)
# Calculate the median of steps taken per day.
median(steps.per.day$steps,na.rm=TRUE)
# Plot of mean steps by day
qplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")
# 5-minute interval with the max number of steps across all the averages
activity[max(mean.steps.per.day$steps,na.rm=TRUE),]$interval
# Total number of missing values in the dataset
sum(is.na(activity))
# Fill in all of the missing values in the dataset with the mean number of steps that are take for the coresponding interval.
# Find the mean number of steps for each 5 minute interval
mean.interval <- ddply(activity, .(interval), function(df) median(df$steps,na.rm=TRUE))
# Rename second column
colnames(mean.interval)[2] <- "steps"
# Loop to locate and replace NAs
for (i in seq_along(activity$steps)){
if (is.na(activity[i,]$steps)){
x <- which(activity[i,]$interval==mean.interval$interval)
activity[i,]$steps <- mean.interval[x,]$steps
}
}
#Histogram of the total number of steps taken each day after NAs were filled.
qplot(date, steps, data=activity, stat='summary', fun.y='sum',geom="histogram", xlab="Datetime",ylab="Total Steps")
# Recalculate the sum of steps per day now that NAs are filled in.
steps.per.day <- ddply(activity, .(date), function(df) sum(df$steps,na.rm=TRUE))
# Rename second column name
colnames(steps.per.day)[2] <- "steps"
# Calculate the mean of steps taken per day.
mean(steps.per.day$steps,na.rm=TRUE)
# Calculate the median of steps taken per day.
median(steps.per.day$steps,na.rm=TRUE)
# Create a new variable in the dataset with indicating whether a given date is a weekday or weekend day.
activity$week <- ifelse (weekdays(activity$date)%in%c("Saturday","Sunday"),"weekend","weekday")
# Convert the variable to a factor format.
activity$week <- as.factor(activity$week)
# Calculate the mean of steps taken per day and create new dataframe
mean.steps.per.day <- ddply(activity, .(date), function(df) mean(df$steps,na.rm=TRUE))
# Rename second column name
colnames(mean.steps.per.day)[2] <- "steps"
#Panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
ggplot(activity, aes(interval, steps)) + geom_line() + aes(colour = factor(week)) + xlab("Interval") + ylab("Mean Steps")+ facet_grid(week ~ .)
qplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")
qplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")+ facet_grid(week ~ .)
qplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")+ facet_grid(week ~ .)+ aes(colour = factor(week))
ggplot(data=activity, interval, steps, stat='summary', fun.y='mean',geom="line", xlab="Interval",ylab="Mean Steps")+ facet_grid(week ~ .)+ aes(colour = factor(week))
setwd("C:/Users/Mark Maxwell/Desktop")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "activity.zip", method="curl")
activity <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "activity.zip", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "activity.zip", method="curl")
activity <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "activity.zip")
activity <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE)
setwd("C:/Users/Mark Maxwell/Desktop/Coursera/Data Science Specialization Track/05. Reproducible Research/Peer Assessment 1")
setwd("C:/Users/Mark Maxwell/Desktop/Coursera/Data Science Specialization Track/05. Reproducible Research/Peer Assessment 1")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "activity.zip")
activity <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE)
setwd("~/GitHub/RepData_PeerAssessment1")
